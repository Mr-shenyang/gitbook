{"./":{"url":"./","title":"简介","keywords":"","body":"个人简介 本人码农一枚，14年步入hellpword世界 "},"sourcecode/":{"url":"sourcecode/","title":"源码阅读","keywords":"","body":"开启自己的源码之旅，希望这次能善始善终。加油吧 本次以jdk1.7.0_80为基础和jdk1.8.0_181进行比对阅读。 "},"sourcecode/map/":{"url":"sourcecode/map/","title":"第一章 Map","keywords":"","body":"1 基础介绍 Map是编程中常用数据结构，它存储一组键值对象，提供key（键）到value（值）的映射。Java通过继承接口java.util.Map对Map数据类型进行规范化定义，如下图 我们可以很清楚的看到，Map定义了三套collection View，分布是keySet()、values()、entrySet(),他们依次代表着key的列表、value的列表、已经key-value的映射关系列表。其中entrySet()更是定义了Map的核心结构是Entry形式的链表结构。 2 核心类图 java.util.Map只是进行了规范化定义，并没有具体实现。Java中有HashMap，HashTable等实现了该规范，其核心类图如下 HashMap 3 1.8新特性 直接看1.8版本中Map的类图 可以发现1.8版本的jdk相对1.7中增加了很多方法比如：putIfAbsent等。 default V putIfAbsent(K key, V value) { V v = get(key); if (v == null) { v = put(key, value); } return v; } 可以发现一个很有意思的定义方式 default。这个关键字彻底解开“实现接口必需实现其所有方法”的魔咒，另外还有一个关键字static，也可实现这个功能。 这里不过多的赘述每个方法的使用和实现细节了。 4 Map十问 "},"sourcecode/map/HashMap.html":{"url":"sourcecode/map/HashMap.html","title":"第一节 HasMap","keywords":"","body":"1 Hash链表结构 在看HashMap源码之前，先复习下Hash表结构： 散列表（Hash table，也叫哈希表），是根据键（Key）而直接访问在内存存储位置的数据结构。也就 "}}